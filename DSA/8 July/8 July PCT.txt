8 July PCT

1.
class Solution {
public:
    void dfs(vector<vector<int>>& image, int i , int j , int oldcolour, int newcolour){
        if(i < 0 || i >= image.size() || j < 0 || j >= image[0].size()) return ;
        if(image[i][j] != oldcolour || image[i][j] == newcolour) return ;
    
    image[i][j] = newcolour;

    dfs(image, i+1 , j , oldcolour , newcolour);
    dfs(image, i-1 , j , oldcolour , newcolour);
    dfs(image, i , j+1 , oldcolour , newcolour);
    dfs(image, i , j-1 , oldcolour , newcolour);
    
    }


    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
    int oldcolour = image[sr][sc];
    dfs(image , sr, sc, oldcolour, color);
    return image;
    }
};

2.
class Solution {
public:
    const long long MOD = 1e9 + 7;

    long long power(long long base, long long exp) {
        long long result = 1;
        base %= MOD;
        while (exp > 0) {
            if (exp % 2 == 1)
                result = (result * base) % MOD;
            base = (base * base) % MOD;
            exp /= 2;
        }
        return result;
    }

    int countGoodNumbers(long long n) {
        long long even = (n + 1) / 2; 
        long long odd = n / 2;
        return (power(5, even) * power(4, odd)) % MOD;
    }
};
;

3.
class Solution {
public:
    vector<vector<int>> res;
    vector<int> temp;
    vector<bool> used;

    void backtrack(vector<int>& nums) {
        if (temp.size() == nums.size()) {
            res.push_back(temp);
            return;
        }

        for (int i = 0; i < nums.size(); ++i) {
            if (used[i]) continue;
            
            if (i > 0 && nums[i] == nums[i-1] && !used[i-1]) continue;

            used[i] = true;
            temp.push_back(nums[i]);

            backtrack(nums);

            temp.pop_back();
            used[i] = false;
        }
    }

    vector<vector<int>> permuteUnique(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        used.assign(nums.size(), false);
        backtrack(nums);
        return res;
    }
};

4.
class Solution {
public:
    int numRabbits(vector<int>& answers) {
        unordered_map<int, int> freq;
        for (int a : answers) {
            freq[a]++;
        }

        int res = 0;
        for (auto [x, count] : freq) {
            int groupSize = x + 1;
            int groups = (count + groupSize - 1) / groupSize;  // ceil(count / groupSize)
            res += groups * groupSize;
        }

        return res;
    }
};
