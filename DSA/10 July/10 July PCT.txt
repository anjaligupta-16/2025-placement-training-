10 July PCT

1.
class Solution {
public:
    vector<vector<int>> res;

    void backtrack(vector<int>& candidates, int target, vector<int>& temp, int start) {
        if (target == 0) {
            res.push_back(temp);
            return;
        }

        for (int i = start; i < candidates.size(); ++i) {
            // Skip duplicates
            if (i > start && candidates[i] == candidates[i - 1]) continue;
            
            // If current candidate is greater than remaining target, break
            if (candidates[i] > target) break;

            temp.push_back(candidates[i]);
            backtrack(candidates, target - candidates[i], temp, i + 1); // move to next index
            temp.pop_back(); // backtrack
        }
    }

    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end()); // sort to handle duplicates
        vector<int> temp;
        backtrack(candidates, target, temp, 0);
        return res;
    }
};
;

2.
class Solution {
public:
    vector<vector<int>> findFarmland(vector<vector<int>>& land) {
        int m = land.size(), n = land[0].size();
        vector<vector<int>> result;

        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (land[i][j] == 1) {
                    int r = i, c = j;
                    // Find the bottom-right corner of the farmland
                    while (r + 1 < m && land[r + 1][j] == 1) r++;
                    while (c + 1 < n && land[i][c + 1] == 1) c++;

                    // Mark the farmland visited
                    for (int x = i; x <= r; ++x) {
                        for (int y = j; y <= c; ++y) {
                            land[x][y] = 0;
                        }
                    }

                    result.push_back({i, j, r, c});
                }
            }
        }

        return result;
    }
};


3.
class Solution {
  public:
    void dfs(int i, int j, vector<vector<int>>& maze, int n, string path,
             vector<string>& res, vector<vector<int>>& visited) {
        
        if (i == n - 1 && j == n - 1) {
            res.push_back(path);
            return;
        }

        // Directions: D, L, R, U
        string dir = "DLRU";
        int dx[] = {1, 0, 0, -1};
        int dy[] = {0, -1, 1, 0};

        for (int d = 0; d < 4; d++) {
            int ni = i + dx[d];
            int nj = j + dy[d];

            if (ni >= 0 && nj >= 0 && ni < n && nj < n &&
                maze[ni][nj] == 1 && visited[ni][nj] == 0) {

                visited[i][j] = 1;
                dfs(ni, nj, maze, n, path + dir[d], res, visited);
                visited[i][j] = 0; // backtrack
            }
        }
    }

    vector<string> ratInMaze(vector<vector<int>>& maze) {
        int n = maze.size();
        vector<string> res;

        if (maze[0][0] == 0 || maze[n - 1][n - 1] == 0)
            return res;

        vector<vector<int>> visited(n, vector<int>(n, 0));
        dfs(0, 0, maze, n, "", res, visited);
        sort(res.begin(), res.end()); // Optional: sort the results
        return res;
    }
};


