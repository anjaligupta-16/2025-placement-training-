4 July PCT

1.
class Solution {
  public:
    int celebrity(vector<vector<int> >& arr) {
        int n = arr.size();
        stack<int> s;
        for(int i = 0 ; i< n; i++){
            s.push(i);
        }
        
        while(s.size() > 1){
            int i = s.top() ; 
            s.pop();
            
            int j = s.top() ;
            s.pop();
            
            if(arr[i][j]==1){
                s.push(j);
            }
            else{
                s.push(i);
            }
        }
        
        int celeb = s.top();
        
        for(int i = 0; i<n ; i++){
            if ((i != celeb) && (arr[i][celeb] == 0|| arr[celeb][i] == 1)){
                return -1;
            }
        }
        
        return celeb;
    }
};

2.
class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size();
        vector<int> lmax(n, 0);
        vector<int> rmax(n, 0);

        lmax[0] = height[0];
        rmax[n-1] = height[n-1];

        for(int i=1 ; i< n ; i++){
            lmax[i] = max(lmax[i-1], height[i]);
        }

        for(int i=n-2 ; i>=0 ; i--){
            rmax[i] = max(rmax[i+1], height[i]);
        }

        int ans = 0;
        for(int i = 0 ; i<n ; i++){
            ans += min(lmax[i], rmax[i]) - height[i];
        }

        return ans;
    }
};


3.
class LRUCache {
public:
    class Node{
        public:
            int key, val;
            Node* prev ; 
            Node* next ;

            Node( int k , int v){
                key = k ;
                val = v ;
                prev = next = NULL;
            }
    };

    Node* head = new Node(-1, -1);
    Node* tail = new Node(-1, -1);

    unordered_map<int , Node*> m ; 
    int limit;

    void addNode(Node* newNode){
        Node* oldNext = head->next;
        head->next = newNode;
        newNode->next = oldNext;
        newNode->prev = head;
        oldNext->prev = newNode;
    }

    void delNode(Node* oldNode){
        Node* oldPrev = oldNode->prev;
        Node* oldNext = oldNode->next;

        oldPrev->next = oldNext;
        oldNext->prev = oldPrev;

    }

    LRUCache(int capacity) {
        limit = capacity ;
        head->next = tail ;
        tail->prev = head ;
    }
    
    int get(int key) {
        if(m.find(key) == m.end()) return -1;

        Node* ansNode = m[key];
        int ans = ansNode->val;

        m.erase(key);
        delNode(ansNode);
        addNode(ansNode);

        m[key] = ansNode;

        return ans;

    }
    
    void put(int key, int value) {
        if(m.find(key) != m.end()){
            Node* oldNode = m[key];
            delNode(oldNode);
            m.erase(key);
        }

        if(m.size() == limit){
            m.erase(tail->prev->key);
            delNode(tail->prev);
        }

        Node* newNode = new Node(key, value);
        addNode(newNode);
        m[key] = newNode;
    }
};


