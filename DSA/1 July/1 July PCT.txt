1 July PCT

2.
class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        stack<int> s;
        unordered_map<int, int> nge;
        vector<int> ans;

        for(int i=nums2.size()-1 ; i>=0 ; i--){
            while(!s.empty() && s.top() <= nums2[i]){
                s.pop();
            }
            nge[nums2[i]] = s.empty()? -1: s.top();
            s.push(nums2[i]);
        }

        for(int num: nums1){
            ans.push_back(nge[num]);
        }
        return ans;
        
    }
};

3.
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        int n=nums.size();
        vector<int> res(n, -1);
        stack<int> st;
        for(int i=0 ; i<2*n ;i++){
            while(!st.empty() && nums[st.top()]< nums[i%n]){
                res[st.top()] = nums[i%n];
                st.pop();
            }

            if(i<n){
                st.push(i);
            }
        }
        return res;
    }
};

3,
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if (!head || !head->next) return head;

        ListNode* odd = head;
        ListNode* even = head->next;
        ListNode* evenHead = even; 

        while (even && even->next) {
            odd->next = even->next;
            odd = odd->next;

            even->next = odd->next;
            even = even->next;
        }

        odd->next = evenHead;
        return head;
    }
};