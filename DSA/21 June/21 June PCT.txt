21 June PCT

1.class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int n = nums.size();
        int min_len = INT_MAX;
        int left = 0 , sum = 0 ;
        for(int right = 0 ; right < n ; right ++){
            sum += nums[right]; 

            while (sum >= target){
                min_len = min(min_len , right - left+1);
                sum -= nums[left];
                left ++;
            }
        }
        return min_len == INT_MAX? 0 : min_len; 
        
    }
};

2.
class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n = nums.size();
        
        int count1 = 0 , count2 = 0 , cand1 = 0 , cand2 = 1;

        for (int num : nums){
            if(num == cand1){
                count1++;
            }
            else if (num == cand2 ){
                count2++;
            }
            else if(count1 == 0){
                cand1 = num;
                count1 = 1;
            }
            else if(count2 == 0 ){
                cand2 = num ;
                count2 = 1;
            }

            else{
                count1--;
                count2--;
            }
        }
        vector<int> result;
        count1 = count2 = 0;
        for(int num : nums){
            if(num == cand1) count1++ ;
            else if (num == cand2) count2++;
        }
        
        if (count1 > n / 3) result.push_back(cand1);
        if (count2 > n / 3) result.push_back(cand2);

        return result;
    }
};


3.
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int n = nums.size();
        int dip = -1;
        for(int i= n-1 ; i> 0 ; i--){
            if (nums[i-1]<nums[i]){
                dip = i-1;
                break;
            }
        }
        
        if (dip != -1) {
            for (int i = n - 1; i > dip; i--) {
                if (nums[i] > nums[dip]) {
                    swap(nums[i], nums[dip]);
                    break;
                }
            }
        }
        

        reverse(nums.begin() + dip + 1 , nums.end());
    }
};

4. 
class Solution {
public:
    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {
        int n = customers.size();
        int already_satisfied = 0;

      
        for (int i = 0; i < n; i++) {
            if (grumpy[i] == 0) {
                already_satisfied += customers[i];
                customers[i] = 0;
            }
        }

        
        int extra_satisfied = 0;
        int max_extra = 0;

        for (int i = 0; i < n; i++) {
            extra_satisfied += customers[i];
            if (i >= X) {
                extra_satisfied -= customers[i - X];
            }
            max_extra = max(max_extra, extra_satisfied);
        }

        return already_satisfied + max_extra;
    }
};
