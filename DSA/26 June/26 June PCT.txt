26 June PCT

1.
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(head==NULL || head->next == NULL) return true;

        ListNode* slow = head;
        ListNode* fast = head;
        while(fast->next && fast->next->next){
            slow = slow->next;
            fast = fast->next->next;
        }
        ListNode* secondHalf = reverseList(slow->next);
        ListNode* firstHalf = head;
        ListNode* temp = secondHalf;
        while (temp) {
            if (firstHalf->val != temp->val)
                return false;
            firstHalf = firstHalf->next;
            temp = temp->next;
        }
        return true;
    }

    private:
    ListNode* reverseList(ListNode* head) {
        ListNode* prev = nullptr;
        ListNode* curr = head;
        while (curr) {
            ListNode* nextTemp = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nextTemp;
        }
        return prev;
    }
};

2.
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(head == NULL || head->next == NULL || k==0) return head;

        //find length of the linked list 
        ListNode * temp = head;
        int length = 1;
        while(temp->next != NULL){
            temp= temp->next;
            length++;
        }

        //incase if k is greater than the length 
        k = k % length;
        if(k==0) return head;

        temp->next = head;

        ListNode* newTemp = head;
        for(int i=0 ; i< length - k - 1 ; i++){
            newTemp = newTemp->next;
        }
        ListNode* newHead = newTemp->next ; 
        newTemp->next = nullptr;

        return newHead;

    }
};

3.
class Solution {
public:
    int magicalString(int n) {
        if (n == 0) return 0;
        if (n <= 3) return 1;

        vector<int> s = {1, 2, 2};
        int count = 1; // Count of 1s
        int i = 2;     // Pointer to the position in s

        while (s.size() < n) {
            int nextNum = 3 - s.back(); // If last is 2, then 1. If last is 1, then 2.
            int repeat = s[i];
            for (int j = 0; j < repeat; ++j) {
                s.push_back(nextNum);
                if (nextNum == 1 && s.size() <= n) count++;
            }
            i++;
        }
        return count;
    }
};
